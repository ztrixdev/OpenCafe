@page "/login"
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@inject panel.Services.Localization Localization
@inject panel.Services.Credentials Credentials
@inject panel.Services.AdminDetails AdminDetails

<PageTitle>@Localization.Translate("Page.Login.PageTitle")</PageTitle>

<div class="container d-flex justify-content-center align-items-center vh-100">
    <div class="card shadow-lg p-4" style="min-width: 350px; max-width: 400px; width: 100%;">
        <h3 class="text-center mb-4">@Localization.Translate("Page.Login.PageTitle")</h3>
        <form>
            <div class="mb-3">
                <label for="instanceUrl" class="form-label">@Localization.Translate("Page.Login.Input.Instance.Label")</label>
                <input type="url" @bind-value="@instanceUrl" class="form-control" id="instanceUrl" placeholder="https://beispiel.at/" required>
            </div>
            <div class="mb-3">
                <label for="accessToken" class="form-label">@Localization.Translate("Page.Login.Input.Token.Label")</label>
                <input type="password" @bind-value="@accessToken" class="form-control" id="accessToken" placeholder="@Localization.Translate("Page.Login.Input.Token.Placeholder")" required>
            </div>
            <div class="d-grid">
                <button type="submit" @onclick="@TryLogin" class="btn btn-primary">@Localization.Translate("Page.Login.PageTitle")</button>
            </div>
        </form>
    </div>
</div>

@code 
{
    public string instanceUrl;
    public string accessToken;

    public async void TryLogin()
    {
        await Credentials.SetCredentials(accessToken, instanceUrl);
        await Credentials.GetCredentials();

        bool loginAttempt = false;

        try 
        {
            var authRes = await new panel.Helpers.Auth().Login(Credentials);
            loginAttempt = authRes.Key;
            await AdminDetails.SetDetails(authRes.Value.Key, authRes.Value.Value);
        }
        catch (ArgumentException)
        {
            await JsRuntime.InvokeVoidAsync("alert", Localization.Translate("Page.Login.Alert.InvalidURL").ToString());
        }
        catch (System.Net.WebException) 
        {
            await JsRuntime.InvokeVoidAsync("alert", Localization.Translate("Page.Login.Alert.NotOC").ToString());
        }

        if (loginAttempt == true) 
            // ts doesnt work anyway lmao
            Navigation.NavigateTo("https://startpage.com/");
        else 
            await JsRuntime.InvokeVoidAsync("alert", Localization.Translate("Page.Login.Alert.LoginFailed").ToString());
    }
}
   
    
