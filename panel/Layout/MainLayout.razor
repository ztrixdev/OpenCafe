@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@inject panel.Services.Localization Localization
@inject panel.Services.Credentials Credentials
@inject panel.Services.AdminDetails AdminDetails

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <article class="content mx-8 my-8">
            @Body
        </article>
    </main>
</div>

@code {
    private async Task ReLogin() 
    {
        await Credentials.ForgetCredentials();
        Navigation.NavigateTo("/login");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!Navigation.Uri.EndsWith("/login", StringComparison.OrdinalIgnoreCase))
        {
            await Credentials.GetCredentials();
            bool isLoggedIn = false;
            try 
            {
                var authRes = await new panel.Helpers.Auth().Login(Credentials);
                isLoggedIn = authRes.Key;
                await AdminDetails.SetDetails(authRes.Value.Key, authRes.Value.Value);
            }
            catch (ArgumentException) 
            {  
                await JsRuntime.InvokeVoidAsync("alert", Localization.Translate("Page.Login.Alert.InvalidURL").ToString());
                await ReLogin();
            }
            catch (System.Net.WebException) 
            {
                await JsRuntime.InvokeVoidAsync("alert", Localization.Translate("Page.Login.Alert.NotOC").ToString());
                await ReLogin();
            }
            finally 
            {
                if (!isLoggedIn) 
                {
                    await JsRuntime.InvokeVoidAsync("alert", Localization.Translate("Page.Login.Alert.LoginFailed").ToString());
                    await ReLogin();
                }
            }
        }
    }
}

